Task 0: Read files Calls and Texts. Print the first line of Texts and the last line of Calls dataset
----------------------------------------------------------------------------------------------------------------------------------------
texts_texting_number, texts_receiving_number, text_time = texts[0][0], texts[0][1], texts[0][2] # O(1)
print("First record of texts, {} texts {} at time {}".format(texts_texting_number, texts_receiving_number, text_time)) # O(1)

calls_calling_number, calls_receiving_number, call_time, call_duration = calls[-1][0], calls[-1][1], calls[-1][2], calls[-1][3] # O(1)
print("Last record of calls, {} calls {} at time {}, lasting {} seconds".format(calls_calling_number, calls_receiving_number, call_time, call_duration)) # O(1)
 
 Worst Case scenario here would be constant - O(1)
---------------------------------------------------------------------------------------------------------------------------------------

Task 1: How many different telephone numbers are there in the records?
---------------------------------------------------------------------------------------------------------------------------------------
unique_numbers = set() # O(1)
concat_list = [] # O(1)
concat_list.extend(calls) # O(n)
concat_list.extend(texts) # O(m)
for item in concat_list: # O(n+m)
  # Add the origin and the receiving phone numbers
  unique_numbers.add(item[0])
  unique_numbers.add(item[1])
  
print('There are {} different telephone numbers in the records'.format(len(unique_numbers))) # O(1)
 
 Worst Case scenario here would be O(n+m) = O(n)
---------------------------------------------------------------------------------------------------------------------------------------

Task 2: Which telephone number spent the longest time on the phone during the period?
---------------------------------------------------------------------------------------------------------------------------------------
call_records = {} # O(1)
for call in calls: # O(n)
  if call[0] in call_records: # O(1)
    call_records[call[0]] += int(call[3]) # O(1)
  else: 
    call_records[call[0]] = int(call[3]) # O(1)
  
  if call[1] in call_records: # O(1)
    call_records[call[1]] += int(call[3]) # O(1)
  else:
    call_records[call[1]] = int(call[3]) # O(1)
    
# Sort and get the first one
sorted_cr = [(k, call_records[k]) for k in sorted(call_records, key=call_records.get, reverse=True)] # O(m)

#Print
print('{}  spent the longest time, {} seconds, on the phone during September 2016.'.format(sorted_cr[0][0], sorted_cr[0][1])) # O(1)
 
 Worst Case scenario here would be O(n+m) = O(n)
 ---------------------------------------------------------------------------------------------------------------------------------------

Task 3: Bangalore calls
---------------------------------------------------------------------------------------------------------------------------------------

# PART A

# Function to get Area Code
def getAreaCode(ph_no): # O(7) for the whole function in the worst case scenario
  areaCode = ''
  ph_no = str(ph_no)
  if(ph_no.startswith('140')):
    areaCode = '140'
  elif(ph_no.startswith('(')):
    idx_ending_parenthesis = ph_no.find(')')
    if(idx_ending_parenthesis>=0):
      areaCode = ph_no[1:idx_ending_parenthesis]
  elif(ph_no.find(' ')>=0):
    areaCode = ph_no[0:4]

  return areaCode

#Get the list of calls originating from Bangalore
calls_from_blore = [(x, y, z, v) for x, y, z, v in calls if(str(x).startswith('(080)'))] # O(n)

# Get the area codes for the receiving numbers and create a unique set
area_codes = set()
for call in calls_from_blore: # O(m)
  area_codes.add(getAreaCode(call[1]))

# Print the area codes of the receving numbers
print('The numbers called by people in Bangalore have codes:') # O(k)
for ac in sorted(area_codes):
  print(ac)

# Part B
# Get the list of calls made from bangalore to bangalore
calls_from_blore_to_blore = [(x, y, z, v) for x, y, z, v in calls_from_blore if(str(y).startswith('(080)'))] # O(p)

# Get the percentage of calls made from bangalore to bangalore
pct_blore_to_blore = round((len(calls_from_blore_to_blore)/len(calls_from_blore))*100, 2) # O(1)
print('{} percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore.'.format(pct_blore_to_blore)) # (1)

 Worst Case scenario here would be O(n+m+k+p) = O(n)
 ---------------------------------------------------------------------------------------------------------------------------------------
 
 Task 4: The telephone company want to identify numbers that might be doing telephone marketing.
 
 # Read the call data into a dataframe
df_calls = pd.DataFrame(calls, columns=['Calling_Number', 'Receiving_Number', 'Start_Time', 'Duration']) # O(n)

# Read the text data into a dataframe
df_texts = pd.DataFrame(texts, columns=['Sending_Number', 'Receiving_Number', 'Timestamp']) # O(m)

# Find phone numbers which make calls but never receive calls
df_tm = df_calls[~df_calls.Calling_Number.isin(df_calls.Receiving_Number)] # O(1)

# Cross check the above list with the phone numbers which never sends or receives texts
df_tm = df_tm[~df_tm.Calling_Number.isin(df_texts.Sending_Number)] # O(1)
df_tm = df_tm[~df_tm.Calling_Number.isin(df_texts.Receiving_Number)] # O(1)

# Print the list of possible telemarketers
print('These numbers could be telemarketers: ')
for tm in np.sort(df_tm.Calling_Number.unique()): # O(p)
  print(tm)
 
Worst Case scenario here would be O(n+m+p) = O(n)
---------------------------------------------------------------------------------------------------------------------------------------

Task 0: Read files Calls and Texts. Print the first line of Texts and the last line of Calls dataset
----------------------------------------------------------------------------------------------------------------------------------------
texts_texting_number, texts_receiving_number, text_time = texts[0][0], texts[0][1], texts[0][2] # O(1)
print("First record of texts, {} texts {} at time {}".format(texts_texting_number, texts_receiving_number, text_time)) # O(1)

calls_calling_number, calls_receiving_number, call_time, call_duration = calls[-1][0], calls[-1][1], calls[-1][2], calls[-1][3] # O(1)
print("Last record of calls, {} calls {} at time {}, lasting {} seconds".format(calls_calling_number, calls_receiving_number, call_time, call_duration)) # O(1)
 
 Worst Case scenario here would be O(1)
---------------------------------------------------------------------------------------------------------------------------------------

Task 1: How many different telephone numbers are there in the records?
---------------------------------------------------------------------------------------------------------------------------------------
unique_numbers = set() # O(1)
for call, text in zip(calls, texts): # O(n+m)
  # Add the calling and the receiving call phone numbers
  unique_numbers.add(call[0]) # O(1)
  unique_numbers.add(call[1]) # O(1)
  
  # Add the sending and the receiving call text phone numbers
  unique_numbers.add(text[0]) # O(1)
  unique_numbers.add(text[1]) # O(1)

print('There are {} different telephone numbers in the records'.format(len(unique_numbers))) # O(1)
 
 Worst Case scenario here would be O(n+m)
---------------------------------------------------------------------------------------------------------------------------------------

Task 2: Which telephone number spent the longest time on the phone during the period?
---------------------------------------------------------------------------------------------------------------------------------------
call_records = {} # O(1)
for call in calls: # O(n)
  if call[0] in call_records: # O(1)
    call_records[call[0]] += int(call[3]) # O(1)
  else: 
    call_records[call[0]] = int(call[3]) # O(1)
  
  if call[1] in call_records: # O(1)
    call_records[call[1]] += int(call[3]) # O(1)
  else:
    call_records[call[1]] = int(call[3]) # O(1)
    
# Sort and get the first one
sorted_cr = [(k, call_records[k]) for k in sorted(call_records, key=call_records.get, reverse=True)] # O(m)

#Print
print('{}  spent the longest time, {} seconds, on the phone during September 2016.'.format(sorted_cr[0][0], sorted_cr[0][1])) # O(1)
 
 Worst Case scenario here would be O(n+m)
 ---------------------------------------------------------------------------------------------------------------------------------------

Task 3: Bangalore calls
---------------------------------------------------------------------------------------------------------------------------------------

- Import statements is 2 lines of code
  = O(2)
- Reading both the Calls and Texts files 
  - Each block of code is 3 lines with one input for Calls and Texts file paths
  - The number of inputs will not change
  - Therefore 6 lines of code
  - Depedning on the number of lines in these files, there could be higher complexity in the amount of time the file reader takes to read the file. The worst case scenario in this case would be O(2n) depending on the number of lines in the two files
  = O(2n+6)

- Function getAreaCode
  - Assignment and return statements are 3 lines
  - Taking the longest if loop for the worst case scenario 6 lines
  - This function is being called for all calls originating from Bangalore, which would be m
  = O(6m)
 
 - The for loop
  - 1 + l times where l is the number of unique area codes
  = O(l+1)
 
 - Assignment and print statements
  = O(6)
 
 Worst Case scenario here would be O(2+2n+6+6m+l+1+6)=O(2n+6m+l+15) = O(2n+6m+l) approximately
 ---------------------------------------------------------------------------------------------------------------------------------------
 
 Task 4: The telephone company want to identify numbers that might be doing telephone marketing.
 
 - Import statements is 2 lines of code
  = O(2)
- Reading both the Calls and Texts files 
  - Each block of code is 3 lines with one input for Calls and Texts file paths
  - The number of inputs will not change
  - Therefore 6 lines of code
  - Depedning on the number of lines in these files, there could be higher complexity in the amount of time the file reader takes to read the file. The worst case scenario in this case would be O(2n) depending on the number of lines in the two files
  = O(2n+6)
  
 - The isin statements
  - Check for numbers that make calls but never receives calls - m (number of ph nos that make calls) * l (number of ph nos that receive calls)
  - Check for numbers that only makes calls but does not send texts - k * j
  - Check for numbers that does not make calls or send texts or receive texts - h * i
  = O(m*l + k*j + h*i)
 
 - There are 6 assignment statements
  = O(6)
  
 - The for loop will run h number of times where g is the number of unique numbers
 = O(g+1)
 
Worst Case scenario here would be O(2+2n+6+m*l + k*j + h*i+6+g+1) = O(2n+m*l+k*j+h*i+g+15) = O(2n+m*l+k*j+h*i+g)
---------------------------------------------------------------------------------------------------------------------------------------
 
 ---------------------------------------------------------------------------------------------------------------------------------------
